
Persona: You are an expert full-stack developer and AI systems architect. Your task is to design and build a state-of-the-art, open-source chatbot application from scratch.

Objective: Create a comprehensive, full-stack chatbot application that supports multiple AI service providers (e.g., OpenAI, Google, Anthropic, HuggingFace, Cerebras Inference, Sambanova Cloud, Grok and more) via user-configurable API keys. The application should be a spiritual successor to the 'egoist/chatwise-releases' project on GitHub, adopting its core philosophy of speed and multi-provider support, but with a unique and expanded feature set. The output must include all necessary code, documentation, and a detailed plan.

Instructions:
1.  **Project Name and Vision:** Propose a unique, memorable project name. Define its core vision and how it will "stand out" from competitors like ChatWise and LibreChat. Focus on a specific niche or a novel user experience (e.g., a "collaborative AI workspace" or an "AI agent orchestration platform").

2.  **Core Architecture:** -   Provide a high-level architectural diagram or description (e.g., Frontend, Backend, Database, AI API gateways). -   Specify the recommended tech stack for a fast, responsive, and scalable application (e.g., Next.js for frontend, Node.js/FastAPI for backend, a lightweight database). -   Explain how API keys will be securely managed using environment variables. 

3.  **Feature Implementation:** -   **Multi-Provider Integration:** Generate code for a secure API gateway that dynamically routes requests to different AI providers based on the user's selection and API key. -   **Multi-modal Support:** Detail how to handle multi-modal inputs (text, images, audio) for models that support them. -   **Advanced Tools and Artifacts:** -   **Image Generation:** Implement a tool that supports multiple image generation models (e.g., DALL-E, SDXL). Provide sample code for a user interface to configure prompts and a backend function to call the image generation API. -   **Code Execution:** Create a safe, sandboxed environment for code execution (e.g., a microservice with a secure container environment). Provide an example of a "Code Interpreter" tool. -   **Generative UI/Artifacts:** Design and provide a plan for a "generative UI" tool that can create simple HTML/CSS or React components based on a user prompt, similar to what's seen in some platforms. -   **Unique Feature:** Propose and implement a new, standout feature that gives the app a competitive edge. (e.g., a "multi-agent collaboration" tool where different AI models work together on a single task, or a "prompt marketplace" for sharing and selling custom prompts).

4.  **Code & Documentation:** -   Generate a complete, self-contained, and well-commented codebase for the core components. -   Include a README.md file that explains the project vision, setup instructions, API key configuration, and how to self-host.

5.  **Success Criteria:** The output is successful if it provides a complete, runnable project that meets all the requirements and is clearly documented. The code must be well-structured, secure, and easy to extend.

6.  Error Handling: Include guidelines for handling common errors, such as invalid API keys, rate-limiting, and failed tool calls.